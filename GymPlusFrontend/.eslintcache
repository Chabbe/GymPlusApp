[{"C:\\examensarbete\\GymPlusFrontend\\src\\index.tsx":"1","C:\\examensarbete\\GymPlusFrontend\\src\\reportWebVitals.ts":"2","C:\\examensarbete\\GymPlusFrontend\\src\\serviceWorkerRegistration.ts":"3","C:\\examensarbete\\GymPlusFrontend\\src\\App.tsx":"4","C:\\examensarbete\\GymPlusFrontend\\src\\components\\footer\\footer.tsx":"5","C:\\examensarbete\\GymPlusFrontend\\src\\components\\body\\body.tsx":"6","C:\\examensarbete\\GymPlusFrontend\\src\\components\\top\\header\\header.tsx":"7","C:\\examensarbete\\GymPlusFrontend\\src\\components\\top\\top.jsx":"8","C:\\examensarbete\\GymPlusFrontend\\src\\components\\top\\menu\\menu.tsx":"9","C:\\examensarbete\\GymPlusFrontend\\src\\components\\createWorkout\\createWorkout.tsx":"10"},{"size":839,"mtime":1611174514315,"results":"11","hashOfConfig":"12"},{"size":440,"mtime":1610704702863,"results":"13","hashOfConfig":"12"},{"size":5398,"mtime":1610704702864,"results":"14","hashOfConfig":"12"},{"size":679,"mtime":1611174514304,"results":"15","hashOfConfig":"12"},{"size":134,"mtime":1611174514309,"results":"16","hashOfConfig":"12"},{"size":5864,"mtime":1611252762417,"results":"17","hashOfConfig":"12"},{"size":430,"mtime":1611174514310,"results":"18","hashOfConfig":"12"},{"size":484,"mtime":1611174514312,"results":"19","hashOfConfig":"12"},{"size":3246,"mtime":1611242319087,"results":"20","hashOfConfig":"12"},{"size":2642,"mtime":1611248430363,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1qywjbx",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\examensarbete\\GymPlusFrontend\\src\\index.tsx",[],["46","47"],"C:\\examensarbete\\GymPlusFrontend\\src\\reportWebVitals.ts",[],"C:\\examensarbete\\GymPlusFrontend\\src\\serviceWorkerRegistration.ts",[],"C:\\examensarbete\\GymPlusFrontend\\src\\App.tsx",[],"C:\\examensarbete\\GymPlusFrontend\\src\\components\\footer\\footer.tsx",[],"C:\\examensarbete\\GymPlusFrontend\\src\\components\\body\\body.tsx",["48","49"],"import React, { useState, useEffect, ChangeEvent } from 'react';\r\nimport axios from 'axios';\r\nimport WorkoutModel from '../../models/workoutModel';\r\nimport ExerciseModel from '../../models/exerciseModel';\r\n\r\nexport default function Body() {\r\n\r\n    const [fetchedWorkouts, setFetchedWorkouts] = useState([]);\r\n    const [changeSheet, setChangeSheet] = useState(true);\r\n    const [activeWorkout, setActiveWorkout] = useState({\r\n        nameOfWorkout: \"\", \r\n        exercise: [\r\n            {_id: 0, \r\n            name: \"Choose a workout to get started.\", \r\n            weight: 0, \r\n            reps: 0, \r\n            muscles: \"\"},\r\n    ]});\r\n    const [showInput, setShowInput] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getWorkouts();\r\n      }, []);\r\n\r\n      const grayCSS = {\r\n          zIndex: '1',\r\n          backgroundColor: '#6F6F6F',\r\n          color: '#fff',\r\n        };\r\n        \r\n        const orangeCSS = {\r\n            backgroundColor: 'orange',\r\n            color: '#000'\r\n        }\r\n        \r\n        const underLine = {\r\n            textDecoration: 'underline',\r\n        }\r\n        \r\n        const noUnderLine = {\r\n            textDecoration: 'none',\r\n        }\r\n        \r\n        function toggleCSS() {\r\n            changeSheet ? setChangeSheet(false) : setChangeSheet(true)\r\n            getWorkouts();\r\n        }\r\n        \r\n        function getWorkouts() {\r\n            axios.get('http://localhost:8000/workout').then((res) => {\r\n                setFetchedWorkouts(res.data);\r\n                console.log('fetched workouts =', res.data);\r\n            });\r\n        }\r\n\r\n        function renderOnActive(workout: any) {\r\n            setActiveWorkout(workout);\r\n            setShowInput(true);\r\n        }  \r\n\r\n        function updateReps(data: any, event: ChangeEvent<HTMLInputElement>) {\r\n            console.log('data =', data);\r\n            console.log('event =', event.target.value);\r\n            console.log('POSTING');\r\n            axios.put('http://localhost:8000/workout', {reps: event.target.value, id: data._id});\r\n        }\r\n        function updateWeight(exercise: ExerciseModel, workout: WorkoutModel) {\r\n            console.log('POSTING');\r\n            axios.put('http://localhost:8000/workout', {weight: exercise.weight, id: workout}).then(res => {\r\n\r\n            });\r\n        }\r\n\r\n        function updateWorkout() {\r\n            axios.put('http://localhost:8000/workout', activeWorkout).then(() =>\r\n                console.log('Posted =', activeWorkout)\r\n            )\r\n        }\r\n        \r\n        return(\r\n            <div className=\"body\">\r\n                <div className=\"session sheets\" style={changeSheet ? grayCSS : orangeCSS}>\r\n                    <span className=\"sheet-header span-header\" onClick={toggleCSS} style={changeSheet ? underLine : noUnderLine}>Active</span>\r\n                    <div className=\"workout-container\">\r\n                        {activeWorkout && <div>\r\n                        <span className=\"workout-name\">{activeWorkout.nameOfWorkout}</span></div>}\r\n                        {activeWorkout.exercise.map((item: any, i) => {\r\n                            return (\r\n                                <div>\r\n                                    <div>\r\n                                        <span className=\"workout-item first\">{item.name}</span>\r\n                                    </div>\r\n                                    <div className=\"second\">\r\n                                        <span>{item.muscles}</span>\r\n                                    </div>\r\n                                    {showInput && <React.Fragment> <div className=\"third\">\r\n                                        <label className=\"workout-label\">Weight\r\n                                            <input type=\"number\" value={item.weight} key={i} name=\"weight\" onChange={(e) => {\r\n                                                let newExercises = [...activeWorkout.exercise]\r\n                                                newExercises.splice(i, 1, {...item, weight: e.target.value})\r\n                                                setActiveWorkout(() => ({...activeWorkout, exercise: newExercises}))}} onBlur={updateWorkout}></input>\r\n                                        </label>\r\n                                    </div>\r\n                                    <div className=\"fourth\">\r\n                                        <label className=\"workout-label\">Reps\r\n                                            <input type=\"number\" value={item.reps} key={i} name=\"reps\" onBlur={updateWorkout}\r\n                                                onChange={(e) => {\r\n                                                let newExercises = [...activeWorkout.exercise]\r\n                                                newExercises.splice(i, 1, {...item, reps: e.target.value})\r\n                                                setActiveWorkout(() => ({...activeWorkout, exercise: newExercises}))}}\r\n                                            ></input>\r\n                                        </label>\r\n                                    </div></React.Fragment>}\r\n                                </div>\r\n                            )        \r\n                        })}\r\n                        </div>\r\n                </div>\r\n                <div className=\"saved-sessions sheets\" style={changeSheet ? orangeCSS : grayCSS}>\r\n                    <span  className=\"sheet-header span-header\" onClick={toggleCSS} style={changeSheet ? noUnderLine : underLine}>Saved</span>\r\n                    {fetchedWorkouts.map((item: WorkoutModel, i) => {\r\n                        return (\r\n                            <span className=\"workout-span\" key={i} onClick={() => renderOnActive(item)}>{item.nameOfWorkout}</span>\r\n                    )        \r\n                    })}\r\n                </div>\r\n            </div>\r\n    );\r\n}","C:\\examensarbete\\GymPlusFrontend\\src\\components\\top\\header\\header.tsx",[],"C:\\examensarbete\\GymPlusFrontend\\src\\components\\top\\top.jsx",[],["50","51"],"C:\\examensarbete\\GymPlusFrontend\\src\\components\\top\\menu\\menu.tsx",["52"],"import React, { useState, useEffect, ChangeEvent } from 'react';\r\nimport axios from 'axios';\r\nimport ExerciseModel from '../../../models/exerciseModel';\r\nimport { workerData } from 'worker_threads';\r\n\r\nexport interface IMenuProps{\r\n  showMenu: boolean;\r\n}\r\n\r\nexport default function Footer (props: IMenuProps) {\r\n\r\n  const [createWorkoutView, setCreateWorkoutView] = useState(true);\r\n  const [fetchedExercises, setFetchedExercises] = useState([]);\r\n  const [workOutArray, setWorkoutArray] = useState([]);\r\n  const [workOutName, setWorkoutName] = useState(\"\");\r\n\r\n  const checkedCSS = {\r\n    color: 'green',\r\n    fontWeight: '700',\r\n  }\r\n\r\n  const uncheckedCSS = {\r\n    color: 'red',\r\n  }\r\n\r\n  useEffect(() => {\r\n    getExercises();\r\n  }, []);\r\n   \r\n  \r\n  function getExercises() {\r\n    axios.get('http://localhost:8000/exercise').then((res) => {\r\n      setFetchedExercises(res.data);\r\n    });\r\n  }\r\n  \r\n  let stringyArray = JSON.stringify(workOutArray);\r\n  \r\n  function checkExercise(event: ChangeEvent<HTMLInputElement>) {\r\n    if(stringyArray.search(event.target.value) === -1){\r\n      setWorkoutArray(workOutArray => workOutArray.concat(JSON.parse(event.target.value)))\r\n      console.log('workoutArray', workOutArray);\r\n    }\r\n     else {\r\n       return\r\n    }\r\n  }\r\n  \r\n  function toggleCreateWorkoutView() {\r\n      createWorkoutView ? setCreateWorkoutView(false) : setCreateWorkoutView(true)\r\n  }\r\n\r\n  function nameOfWorkout(event: ChangeEvent<HTMLInputElement>) {\r\n    setWorkoutName(event.target.value);\r\n    console.log(event.target.value);\r\n  }\r\n\r\n  function postAndCreateWorkout() {\r\n    console.log('Postin =', {exercise: workOutArray, nameOfWorkout: workOutName});\r\n    axios.post('http://localhost:8000/workout', {exercise: workOutArray, nameOfWorkout: workOutName})\r\n    .then((res) => {\r\n      console.log('response gotten', res);\r\n    });\r\n    setWorkoutArray([]);\r\n    toggleCreateWorkoutView();\r\n  }\r\n\r\n  return(\r\n    <div>\r\n      {!props.showMenu &&\r\n        <div className=\"menu\">\r\n          {createWorkoutView && \r\n          <div>\r\n            <span>Profile</span>\r\n            <span onClick={toggleCreateWorkoutView}>Create Workout</span>\r\n            <span>About</span>\r\n            <span>Settings</span>\r\n          </div>}\r\n          {!createWorkoutView && \r\n          <div className=\"workout-view\">\r\n            <span>Create Workout</span>\r\n            <form>\r\n            <label className=\"create-label\">Name of workout<br/>\r\n              <input type=\"text\" onChange={nameOfWorkout}/>\r\n            </label>\r\n            {fetchedExercises.map((item: ExerciseModel) => {\r\n                return (\r\n                <label>{item.name} | {item.muscles.toString().toUpperCase()}\r\n                  <input className=\"exercise-input\" type=\"checkbox\" key={item.name.toString()} value={JSON.stringify(item)} onChange={checkExercise}></input>\r\n                  <i className=\"far fa-check-circle\" style={stringyArray.search(JSON.stringify(item)) === -1 ? uncheckedCSS : checkedCSS}></i>\r\n                </label>\r\n                )        \r\n            })}\r\n            </form>\r\n            <span onClick={postAndCreateWorkout} className=\"save-workout\">Save Workout</span>\r\n          </div>}\r\n        </div>}\r\n    </div>\r\n  );\r\n}","C:\\examensarbete\\GymPlusFrontend\\src\\components\\createWorkout\\createWorkout.tsx",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":61,"column":18,"nodeType":"59","messageId":"60","endLine":61,"endColumn":28},{"ruleId":"57","severity":1,"message":"61","line":67,"column":18,"nodeType":"59","messageId":"60","endLine":67,"endColumn":30},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"62","line":4,"column":10,"nodeType":"59","messageId":"60","endLine":4,"endColumn":20},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"@typescript-eslint/no-unused-vars","'updateReps' is defined but never used.","Identifier","unusedVar","'updateWeight' is defined but never used.","'workerData' is defined but never used.","no-global-assign","no-unsafe-negation"]